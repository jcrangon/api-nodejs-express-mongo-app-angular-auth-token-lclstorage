{"ast":null,"code":"import { HttpHeaders } from \"@angular/common/http\";\nimport { QueryParts } from \"../models/query-parts.model\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst apiRoot = 'http://api.voicerss.org/?';\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'content-type': 'application/json',\n    'Accept': 'text/html, application/xhtml+xml, */*'\n  }),\n  responseType: 'blob'\n};\nexport class TtsService {\n  constructor(http) {\n    this.http = http;\n    this.queryParts = new QueryParts('8d40c3a0e5954f50966ac747c775d215', '', 'fr-fr', 'Iva', '2', 'mp3', '16khz_16bit_stereo');\n  }\n  createQueryUrl(queryParts) {\n    let queryString = apiRoot + 'key=' + queryParts.key;\n    queryString += '&hl=' + queryParts.hl;\n    queryString += '&c=' + queryParts.c;\n    queryString += '&f=' + queryParts.f;\n    queryString += '&v=' + queryParts.v;\n    queryString += '&src=' + encodeURI(queryParts.src);\n    return queryString;\n  }\n  getAudioFile(queryParts) {\n    let url = this.createQueryUrl(queryParts);\n    console.log(url);\n    return this.http.get(url, httpOptions);\n  }\n  setSource(src) {\n    this.queryParts.src = src;\n  }\n  static #_ = this.ɵfac = function TtsService_Factory(t) {\n    return new (t || TtsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TtsService,\n    factory: TtsService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","QueryParts","apiRoot","httpOptions","headers","responseType","TtsService","constructor","http","queryParts","createQueryUrl","queryString","key","hl","c","f","v","encodeURI","src","getAudioFile","url","console","log","get","setSource","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jcran\\Desktop\\tts\\myapp\\src\\app\\services\\tts.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from \"@angular/common/http\"\r\nimport { Injectable } from \"@angular/core\"\r\nimport { Observable } from \"rxjs\"\r\nimport { QueryParts } from \"../models/query-parts.model\"\r\n\r\n\r\nconst apiRoot: string = 'http://api.voicerss.org/?'\r\n\r\nconst httpOptions: any = {\r\n  headers: new HttpHeaders({\r\n    'content-type': 'application/json',\r\n    'Accept': 'text/html, application/xhtml+xml, */*'\r\n  }),\r\n  responseType: 'blob' as 'json'\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class TtsService\r\n{\r\n  public queryParts!: QueryParts\r\n\r\n  constructor(\r\n    private http: HttpClient\r\n  ){\r\n    this.queryParts = new QueryParts(\r\n      '8d40c3a0e5954f50966ac747c775d215',\r\n      '',\r\n      'fr-fr',\r\n      'Iva',\r\n      '2',\r\n      'mp3',\r\n      '16khz_16bit_stereo'\r\n    )\r\n  }\r\n\r\n  createQueryUrl(queryParts: QueryParts): string {\r\n    let queryString:string = apiRoot + 'key=' + queryParts.key\r\n    queryString += '&hl=' + queryParts.hl\r\n    queryString += '&c=' + queryParts.c\r\n    queryString += '&f=' + queryParts.f\r\n    queryString += '&v=' + queryParts.v\r\n    queryString += '&src=' + encodeURI(queryParts.src)\r\n\r\n    return queryString\r\n  }\r\n\r\n  getAudioFile(queryParts: QueryParts): Observable<any> {\r\n    let url = this.createQueryUrl(queryParts)\r\n    console.log(url);\r\n    return this.http.get<Blob>(url, httpOptions)\r\n  }\r\n\r\n  setSource(src: string): void {\r\n    this.queryParts.src = src\r\n  }\r\n\r\n}\r\n"],"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAG9D,SAASC,UAAU,QAAQ,6BAA6B;;;AAGxD,MAAMC,OAAO,GAAW,2BAA2B;AAEnD,MAAMC,WAAW,GAAQ;EACvBC,OAAO,EAAE,IAAIJ,WAAW,CAAC;IACvB,cAAc,EAAE,kBAAkB;IAClC,QAAQ,EAAE;GACX,CAAC;EACFK,YAAY,EAAE;CACf;AAMD,OAAM,MAAOC,UAAU;EAIrBC,YACUC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAEZ,IAAI,CAACC,UAAU,GAAG,IAAIR,UAAU,CAC9B,kCAAkC,EAClC,EAAE,EACF,OAAO,EACP,KAAK,EACL,GAAG,EACH,KAAK,EACL,oBAAoB,CACrB;EACH;EAEAS,cAAcA,CAACD,UAAsB;IACnC,IAAIE,WAAW,GAAUT,OAAO,GAAG,MAAM,GAAGO,UAAU,CAACG,GAAG;IAC1DD,WAAW,IAAI,MAAM,GAAGF,UAAU,CAACI,EAAE;IACrCF,WAAW,IAAI,KAAK,GAAGF,UAAU,CAACK,CAAC;IACnCH,WAAW,IAAI,KAAK,GAAGF,UAAU,CAACM,CAAC;IACnCJ,WAAW,IAAI,KAAK,GAAGF,UAAU,CAACO,CAAC;IACnCL,WAAW,IAAI,OAAO,GAAGM,SAAS,CAACR,UAAU,CAACS,GAAG,CAAC;IAElD,OAAOP,WAAW;EACpB;EAEAQ,YAAYA,CAACV,UAAsB;IACjC,IAAIW,GAAG,GAAG,IAAI,CAACV,cAAc,CAACD,UAAU,CAAC;IACzCY,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAChB,OAAO,IAAI,CAACZ,IAAI,CAACe,GAAG,CAAOH,GAAG,EAAEjB,WAAW,CAAC;EAC9C;EAEAqB,SAASA,CAACN,GAAW;IACnB,IAAI,CAACT,UAAU,CAACS,GAAG,GAAGA,GAAG;EAC3B;EAAC,QAAAO,CAAA,G;qBArCUnB,UAAU,EAAAoB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAVxB,UAAU;IAAAyB,OAAA,EAAVzB,UAAU,CAAA0B,IAAA;IAAAC,UAAA,EAHT;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}