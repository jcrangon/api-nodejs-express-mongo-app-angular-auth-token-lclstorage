{"ast":null,"code":"import * as data from '../data/data.json';\nimport * as i0 from \"@angular/core\";\nexport class EmployeService {\n  constructor() {\n    // on récupère le json\n    // il est automatiquement converti en tableau d'objets\n    // par angular\n    this.rawData = data.employes;\n    console.log(this.rawData);\n    // on boucle sur le tableau d'objet pour creer un\n    // objet de classe EmpleModel avec chaque élément\n    // du tableau\n    // this.rawData.forEach(employe =>{\n    //   let newEmploye = new EmployeModel(employe.nom, employe.prenom, employe.fonction)\n    //   this.employeList.push(newEmploye)\n    // })\n    // on affiche a la console pour débugger\n    console.log(\"liste des employés:\", this.employeList);\n  }\n  getEmployeList() {\n    return this.employeList;\n  }\n  getEmployeByFunction(fonction) {\n    let temp = [];\n    this.employeList.forEach(employe => {\n      if (employe.fonction === fonction) {\n        temp.push(employe);\n      }\n    });\n    return temp;\n  }\n  static #_ = this.ɵfac = function EmployeService_Factory(t) {\n    return new (t || EmployeService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EmployeService,\n    factory: EmployeService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["data","EmployeService","constructor","rawData","employes","console","log","employeList","getEmployeList","getEmployeByFunction","fonction","temp","forEach","employe","push","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jcran\\Desktop\\etudeAngular\\myapp\\src\\app\\services\\employe-service.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { EmployeModel } from \"../models/employe-model.model\";\r\nimport * as data from '../data/data.json'\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class EmployeService\r\n{\r\n  private employeList!: EmployeModel[]\r\n  private rawData: any\r\n\r\n  constructor(){\r\n    // on récupère le json\r\n    // il est automatiquement converti en tableau d'objets\r\n    // par angular\r\n    this.rawData = data.employes\r\n    console.log(this.rawData)\r\n\r\n    // on boucle sur le tableau d'objet pour creer un\r\n    // objet de classe EmpleModel avec chaque élément\r\n    // du tableau\r\n    // this.rawData.forEach(employe =>{\r\n\r\n    //   let newEmploye = new EmployeModel(employe.nom, employe.prenom, employe.fonction)\r\n\r\n    //   this.employeList.push(newEmploye)\r\n    // })\r\n\r\n    // on affiche a la console pour débugger\r\n    console.log(\"liste des employés:\", this.employeList)\r\n  }\r\n\r\n  getEmployeList(): EmployeModel[]\r\n  {\r\n    return this.employeList\r\n  }\r\n\r\n  getEmployeByFunction(fonction: string): EmployeModel[]\r\n  {\r\n\r\n    let temp: EmployeModel[] = []\r\n\r\n    this.employeList.forEach(employe => {\r\n      if(employe.fonction === fonction) {\r\n        temp.push(employe)\r\n      }\r\n    })\r\n\r\n    return temp\r\n  }\r\n\r\n\r\n}\r\n"],"mappings":"AAEA,OAAO,KAAKA,IAAI,MAAM,mBAAmB;;AAMzC,OAAM,MAAOC,cAAc;EAKzBC,YAAA;IACE;IACA;IACA;IACA,IAAI,CAACC,OAAO,GAAGH,IAAI,CAACI,QAAQ;IAC5BC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,OAAO,CAAC;IAEzB;IACA;IACA;IACA;IAEA;IAEA;IACA;IAEA;IACAE,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAACC,WAAW,CAAC;EACtD;EAEAC,cAAcA,CAAA;IAEZ,OAAO,IAAI,CAACD,WAAW;EACzB;EAEAE,oBAAoBA,CAACC,QAAgB;IAGnC,IAAIC,IAAI,GAAmB,EAAE;IAE7B,IAAI,CAACJ,WAAW,CAACK,OAAO,CAACC,OAAO,IAAG;MACjC,IAAGA,OAAO,CAACH,QAAQ,KAAKA,QAAQ,EAAE;QAChCC,IAAI,CAACG,IAAI,CAACD,OAAO,CAAC;;IAEtB,CAAC,CAAC;IAEF,OAAOF,IAAI;EACb;EAAC,QAAAI,CAAA,G;qBA3CUd,cAAc;EAAA;EAAA,QAAAe,EAAA,G;WAAdf,cAAc;IAAAgB,OAAA,EAAdhB,cAAc,CAAAiB,IAAA;IAAAC,UAAA,EAHb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}