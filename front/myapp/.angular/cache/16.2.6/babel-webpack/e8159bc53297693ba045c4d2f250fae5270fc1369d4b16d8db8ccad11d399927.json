{"ast":null,"code":"import { EmployeModel } from \"../models/employe-model.model\";\nimport data from '../data/data.js';\nimport * as i0 from \"@angular/core\";\nexport class EmployeService {\n  constructor() {\n    // on récupère le json\n    // il est automatiquement converti en tableau d'objets\n    // par angular\n    this.rawData = data;\n    console.log(this.rawData);\n    this.employeList = [];\n    // on boucle sur le tableau d'objet pour creer un\n    // objet de classe EmployeModel avec chaque élément\n    // du tableau\n    this.rawData.map(employe => {\n      let newEmploye = new EmployeModel(employe.nom, employe.prenom, employe.fonction);\n      this.employeList.push(newEmploye);\n    });\n    // on affiche a la console pour débugger\n    console.log(\"liste des employés:\", this.employeList);\n  }\n  getEmployeList() {\n    return this.employeList;\n  }\n  getEmployeByFunction(fonction) {\n    let temp = [];\n    this.employeList.forEach(employe => {\n      if (employe.fonction === fonction) {\n        temp.push(employe);\n      }\n    });\n    return temp;\n  }\n  static #_ = this.ɵfac = function EmployeService_Factory(t) {\n    return new (t || EmployeService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: EmployeService,\n    factory: EmployeService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["EmployeModel","data","EmployeService","constructor","rawData","console","log","employeList","map","employe","newEmploye","nom","prenom","fonction","push","getEmployeList","getEmployeByFunction","temp","forEach","_","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\jcran\\Desktop\\tts\\myapp\\src\\app\\services\\employe-service.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { EmployeModel } from \"../models/employe-model.model\";\r\nimport data from '../data/data.js'\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\n\r\nexport class EmployeService\r\n{\r\n  private employeList!: EmployeModel[]\r\n  private rawData: any\r\n\r\n  constructor(){\r\n    // on récupère le json\r\n    // il est automatiquement converti en tableau d'objets\r\n    // par angular\r\n    this.rawData = data\r\n    console.log(this.rawData)\r\n\r\n    this.employeList = []\r\n\r\n    // on boucle sur le tableau d'objet pour creer un\r\n    // objet de classe EmployeModel avec chaque élément\r\n    // du tableau\r\n    this.rawData.map(employe =>{\r\n\r\n      let newEmploye = new EmployeModel(employe.nom, employe.prenom, employe.fonction)\r\n\r\n      this.employeList.push(newEmploye)\r\n    })\r\n\r\n    // on affiche a la console pour débugger\r\n    console.log(\"liste des employés:\", this.employeList)\r\n  }\r\n\r\n  getEmployeList(): EmployeModel[]\r\n  {\r\n    return this.employeList\r\n  }\r\n\r\n  getEmployeByFunction(fonction: string): EmployeModel[]\r\n  {\r\n\r\n    let temp: EmployeModel[] = []\r\n\r\n    this.employeList.forEach(employe => {\r\n      if(employe.fonction === fonction) {\r\n        temp.push(employe)\r\n      }\r\n    })\r\n\r\n    return temp\r\n  }\r\n\r\n\r\n}\r\n"],"mappings":"AACA,SAASA,YAAY,QAAQ,+BAA+B;AAC5D,OAAOC,IAAI,MAAM,iBAAiB;;AAMlC,OAAM,MAAOC,cAAc;EAKzBC,YAAA;IACE;IACA;IACA;IACA,IAAI,CAACC,OAAO,GAAGH,IAAI;IACnBI,OAAO,CAACC,GAAG,CAAC,IAAI,CAACF,OAAO,CAAC;IAEzB,IAAI,CAACG,WAAW,GAAG,EAAE;IAErB;IACA;IACA;IACA,IAAI,CAACH,OAAO,CAACI,GAAG,CAACC,OAAO,IAAG;MAEzB,IAAIC,UAAU,GAAG,IAAIV,YAAY,CAACS,OAAO,CAACE,GAAG,EAAEF,OAAO,CAACG,MAAM,EAAEH,OAAO,CAACI,QAAQ,CAAC;MAEhF,IAAI,CAACN,WAAW,CAACO,IAAI,CAACJ,UAAU,CAAC;IACnC,CAAC,CAAC;IAEF;IACAL,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE,IAAI,CAACC,WAAW,CAAC;EACtD;EAEAQ,cAAcA,CAAA;IAEZ,OAAO,IAAI,CAACR,WAAW;EACzB;EAEAS,oBAAoBA,CAACH,QAAgB;IAGnC,IAAII,IAAI,GAAmB,EAAE;IAE7B,IAAI,CAACV,WAAW,CAACW,OAAO,CAACT,OAAO,IAAG;MACjC,IAAGA,OAAO,CAACI,QAAQ,KAAKA,QAAQ,EAAE;QAChCI,IAAI,CAACH,IAAI,CAACL,OAAO,CAAC;;IAEtB,CAAC,CAAC;IAEF,OAAOQ,IAAI;EACb;EAAC,QAAAE,CAAA,G;qBA7CUjB,cAAc;EAAA;EAAA,QAAAkB,EAAA,G;WAAdlB,cAAc;IAAAmB,OAAA,EAAdnB,cAAc,CAAAoB,IAAA;IAAAC,UAAA,EAHb;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}